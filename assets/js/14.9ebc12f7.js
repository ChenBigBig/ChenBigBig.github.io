(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{288:function(t,n,s){"use strict";s.r(n);var a=s(14),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"springboot篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot篇"}},[t._v("#")]),t._v(" SpringBoot篇")]),t._v(" "),n("h2",{attrs:{id:"什么是springboot-为什么要用springboot-springboot的优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是springboot-为什么要用springboot-springboot的优点"}},[t._v("#")]),t._v(" 什么是SpringBoot，为什么要用SpringBoot，SpringBoot的优点")]),t._v(" "),n("p",[t._v("1.Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，使开发者能快速上手。"),n("br"),t._v("\n2.快速开发，快速整合，配置简化、内嵌服务容器"),n("br"),t._v("\n3.Spring Boot 主要有如下优点：")]),t._v(" "),n("ul",[n("li",[t._v("容易上手，提升开发效率，为 Spring 开发提供一个更快、更简单的开发框架。")]),t._v(" "),n("li",[t._v("开箱即用，远离繁琐的配置。")]),t._v(" "),n("li",[t._v("提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。")]),t._v(" "),n("li",[t._v("SpringBoot总结就是使编码变简单、配置变简单、部署变简单、监控变简单等等")])]),t._v(" "),n("h2",{attrs:{id:"spring、spring-mvc、spring-boot-有什么区别-都是做什么的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring、spring-mvc、spring-boot-有什么区别-都是做什么的"}},[t._v("#")]),t._v(" Spring、Spring mvc、Spring boot 有什么区别？都是做什么的？")]),t._v(" "),n("p",[n("strong",[t._v("Spring----\x3e")]),t._v(":"),n("br"),t._v("\nSpring是一个轻量级的开源Java框架，用于开发企业级应用程序。"),n("br"),t._v("\nSpring提供了一套综合的解决方案，用于管理应用程序的组件、处理依赖注入、实现面向切面编程（AOP）等。"),n("br"),t._v("\nSpring可以帮助开发者构建松耦合、可测试和可维护的应用程序。"),n("br"),t._v(" "),n("strong",[t._v("Spring MVC----\x3e")]),t._v(":"),n("br"),t._v("\nSpring MVC是基于Spring的Web框架，用于开发Web应用程序。"),n("br"),t._v("\nSpring MVC提供了一种基于模型-视图-控制器（MVC）的架构模式，用于处理Web请求和响应。"),n("br"),t._v("\nSpring MVC通过将请求映射到控制器、处理请求参数、调用业务逻辑、渲染视图等，帮助开发者构建灵活的Web应用程序。"),n("br"),t._v(" "),n("strong",[t._v("Spring Boot----\x3e")]),t._v(":"),n("br"),t._v("\nSpring Boot是一个用于简化和快速构建Spring应用程序的框架。"),n("br"),t._v("\nSpring Boot提供了自动配置和约定优于配置的原则，使开发者能够快速搭建独立运行的、生产级别的Spring应用程序。"),n("br"),t._v("\nSpring Boot通过提供默认的配置和开箱即用的功能，减少了繁琐的配置和集成工作，让开发者能够更专注于业务逻辑的实现。"),n("br"),t._v(" "),n("strong",[t._v("[简单概述]")]),t._v(":"),n("br"),t._v("\nSpring是一个综合性的框架，提供了依赖注入、AOP、事务管理等功能，用于开发企业级应用程序。"),n("br"),t._v("\nSpring MVC是基于Spring的Web框架，用于开发Web应用程序，实现了MVC架构模式，处理Web请求和响应。"),n("br"),t._v("\nSpring Boot是一个简化和快速构建Spring应用程序的框架，提供了自动配置和约定优于配置的原则，帮助开发者快速搭建独立运行的Spring应用程序。"),n("br"),t._v("\n这些框架/技术之间有关联，Spring MVC是基于Spring的一部分，而Spring Boot则是建立在Spring框架之上的工具，可以简化Spring应用程序的开发和部署过程。")]),t._v(" "),n("h2",{attrs:{id:"运行springboot有哪几种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行springboot有哪几种方式"}},[t._v("#")]),t._v(" 运行SpringBoot有哪几种方式？")]),t._v(" "),n("p",[t._v("1.打包用命令或者者放到容器中运行"),n("br"),t._v("\n2.用Maven/Gradle插件运行"),n("br"),t._v("\n3.直接执行 main 方法运行")]),t._v(" "),n("h2",{attrs:{id:"springboot的核心注解有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot的核心注解有哪些"}},[t._v("#")]),t._v(" SpringBoot的核心注解有哪些？")]),t._v(" "),n("p",[t._v("1.启动类上面的注解@SpringBootApplicaiton，它也是 Spring Boot 的核心注解"),n("br"),t._v("\n2.@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。"),n("br"),t._v("\n3.@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能：@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。"),n("br"),t._v("\n4.@ComponentScan：Spring组件扫描")]),t._v(" "),n("h2",{attrs:{id:"spring-boot打包成jar和war的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot打包成jar和war的区别"}},[t._v("#")]),t._v(" Spring Boot打包成jar和war的区别")]),t._v(" "),n("p",[t._v("Spring Boot打包成jar和war的区别主要在部署和运行环境上。")]),t._v(" "),n("ol",[n("li",[t._v("Jar包：将Spring Boot应用打包成jar包，它包含了应用的所有依赖和资源文件，并且可以在所有支持Java的环境上运行，包括本地运行和云端运行。使用jar包部署Spring Boot应用非常方便，只需要执行java -jar命令即可启动应用。")]),t._v(" "),n("li",[t._v("War包：将Spring Boot应用打包成war包，它是Web应用程序归档文件，包含了应用的所有文件和资源，可以在支持Java Web容器的环境中部署和运行。与jar包相比，war包需要将Spring Boot应用部署到Web容器中，然后启动容器，才能运行应用。在生产环境中，通常使用war包来部署Spring Boot应用。"),n("br"),t._v("\n总之，jar包适用于独立运行的应用，而war包适用于Web应用程序。根据实际需求来选择打包方式。")])]),t._v(" "),n("h2",{attrs:{id:"springboot有哪几种读取配置的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot有哪几种读取配置的方式"}},[t._v("#")]),t._v(" SpringBoot有哪几种读取配置的方式")]),t._v(" "),n("p",[t._v("Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationPropertie注解来绑定变量")]),t._v(" "),n("h2",{attrs:{id:"什么是yaml语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是yaml语言"}},[t._v("#")]),t._v(" 什么是YAML语言")]),t._v(" "),n("p",[t._v("YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。")]),t._v(" "),n("h2",{attrs:{id:"springboot核心原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot核心原理"}},[t._v("#")]),t._v(" SpringBoot核心原理")]),t._v(" "),n("p",[t._v("Spring Boot的核心原理是基于约定优于配置的思想，旨在简化和快速构建Spring应用程序。以下是Spring Boot的核心原理：")]),t._v(" "),n("ol",[n("li",[t._v("自动配置（Auto-configuration）：Spring Boot通过自动配置机制，根据应用程序的依赖和配置，自动为应用程序提供合理的默认配置。它通过在类路径上检测相关的库、框架和配置信息，根据这些信息自动配置Spring应用程序的各个部分。")]),t._v(" "),n("li",[t._v('起步依赖（Starter Dependencies）：Spring Boot提供了一系列称为"起步依赖"的依赖关系，这些依赖关系包含了常用的库和框架，用于快速搭建特定类型的应用程序。起步依赖简化了依赖管理和版本控制，并帮助开发者轻松引入所需的功能模块。')]),t._v(" "),n("li",[t._v("嵌入式容器（Embedded Container）：Spring Boot支持使用内嵌的Servlet容器（如Tomcat、Jetty或Undertow），将应用程序打包为可执行的JAR文件，并直接运行应用程序，而不需要外部容器的部署。这样可以简化应用程序的部署和运行，提高开发者的生产力。")]),t._v(" "),n("li",[t._v("健康检查（Actuator Health Check）：Spring Boot提供了Actuator模块，用于监控和管理Spring应用程序。其中包含了健康检查（Health Check）功能，可以检查应用程序的运行状况，如数据库连接、消息队列连接等，并提供了相关的端点（Endpoint）和接口，方便进行健康状态的监控和管理。")]),t._v(" "),n("li",[t._v("外部化配置（Externalized Configuration）：Spring Boot支持将应用程序的配置信息外部化，可以使用属性文件、YAML文件、环境变量等方式来配置应用程序。这使得应用程序的配置更加灵活和易于管理，减少了硬编码配置的需求。"),n("br"),t._v("\n总之，Spring Boot的核心原理是通过自动配置、起步依赖、嵌入式容器、健康检查和外部化配置等机制，以简化的方式构建和管理Spring应用程序。它使开发者能够快速启动和开发应用程序，并提供了一致性、高度可配置的开发体验。")])]),t._v(" "),n("h2",{attrs:{id:"springboot中如何处理异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot中如何处理异常"}},[t._v("#")]),t._v(" SpringBoot中如何处理异常")]),t._v(" "),n("p",[t._v("java\n1.使用@ControllerAdvice和@ExceptionHandler注解："),n("br"),t._v("\n创建一个全局的异常处理类，并使用@ControllerAdvice注解标记该类。"),n("br"),t._v("\n在异常处理类中定义针对不同异常的处理方法，并使用@ExceptionHandler注解标记这些方法。"),n("br"),t._v("\n在处理方法中，可以根据具体的异常类型进行相应的处理，如返回错误信息、跳转到错误页面等。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码部分:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ControllerAdvice")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalExceptionHandler")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ExceptionHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" modelAndView "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        modelAndView"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"errorMessage"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modelAndView"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("2.使用@RestControllerAdvice和@ExceptionHandler注解："),n("br"),t._v("\n类似于上述方法，创建一个全局的异常处理类，并使用@RestControllerAdvice注解标记该类。"),n("br"),t._v("\n在异常处理类中定义针对不同异常的处理方法，并使用@ExceptionHandler注解标记这些方法。"),n("br"),t._v("\n在处理方法中，可以根据具体的异常类型进行相应的处理，如返回错误信息、自定义JSON格式等。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码部分:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestControllerAdvice")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalExceptionHandler")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ExceptionHandler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResponseEntity")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResponseEntity")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("status")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INTERNAL_SERVER_ERROR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("body")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("3.使用自定义异常类和异常处理器\n创建自定义的异常类，继承自Exception或其他合适的异常类，用于标识特定的业务异常。\n创建异常处理器类，实现HandlerExceptionResolver接口，并在其中实现对特定异常的处理逻辑。\n注册异常处理器类，使其生效。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码部分: ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义异常类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomExceptionHandler")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerExceptionResolver")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" modelAndView "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        modelAndView"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"errorMessage"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modelAndView"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"springboot如何解决跨域问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot如何解决跨域问题"}},[t._v("#")]),t._v(" SpringBoot如何解决跨域问题")]),t._v(" "),n("p",[t._v("1:使用@CrossOrigin注解：")]),t._v(" "),n("ul",[n("li",[t._v("在控制器类或控制器方法上添加@CrossOrigin注解。")]),t._v(" "),n("li",[t._v("在@CrossOrigin注解中指定允许跨域请求的来源（origin）、方法（methods）、头部信息（allowedHeaders）等参数。")])]),t._v(" "),n("p",[t._v("2:使用WebMvcConfigurer配置跨域：")]),t._v(" "),n("ul",[n("li",[t._v("创建一个实现WebMvcConfigurer接口的配置类。")]),t._v(" "),n("li",[t._v("重写addCorsMappings()方法，在方法中配置跨域请求的规则。")])]),t._v(" "),n("p",[t._v("3:使用Filter过滤器处理跨域请求：")]),t._v(" "),n("ul",[n("li",[t._v("创建一个实现javax.servlet.Filter接口的跨域过滤器。")]),t._v(" "),n("li",[t._v("在doFilter()方法中设置响应头信息，允许跨域请求。")])])])}),[],!1,null,null,null);n.default=r.exports}}]);